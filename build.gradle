/*
 * The MIT License (MIT)
 * Copyright (c) 2017 Sybit GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 */


plugins {
    id "maven-publish"
    id "jacoco"
    id 'com.github.jk1.dependency-license-report' version '2.0'
}

apply plugin: 'java'

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return "";
    }
} as Object

group = 'com.sybit.airtable'
//version = getVersionName()
description = """API to access Airtable"""

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

tasks.named("processTestResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        // You can add other directories to the classpath like this:
        //runtimeClasspath += files('src/itest/resources/com/buransky')
        // Use "java" if you don't use Scala as a programming language
        java.srcDir file('src/itest/java')
    }
    // This is just to trick IntelliJ IDEA to add integration test
    // resources to classpath when running integration tests from
    // the IDE. It's is not a good solution but I don't know about
    // a better one.
    test {
        resources.srcDir file('src/itest/resources')
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://dl.bintray.com/typesafe/maven-releases" }
}

configurations {
    codacy
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation group: 'com.konghq', name: 'unirest-java', version: '3.13.11'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation group: 'com.google.code.gson', name: 'gson', version:'2.8.5'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'org.slf4j', name: 'slf4j-api', version:'1.7.26'

    testImplementation group: 'junit', name: 'junit', version:'4.13.2'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version:'2.23.2'
    testImplementation group: 'org.slf4j', name: 'slf4j-jdk14', version:'1.7.26'

    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}


test {
    useJUnit()
}

// custom tasks for creating source jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
// custom tasks for creating javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

//task to send coverage data to Codacy
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    mainClass = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

task integrationTest(type: Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

publishing {
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
        /*
        maven(MavenPublication) {
            artifactId = rootProject.name
            groupId = group
            version getVersionName()

            pom {
                name = 'Airtable.java'
                description = 'This is a Java API client for Airtable'
                url = 'https://github.com/Sybit-Education/airtable.java'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'stritti'
                        name = 'Stephan Strittmatter'
                        email = 'stephan.strittmatter@sybit.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://Sybit-Education/airtable.java.git'
                    developerConnection = 'scm:git:ssh://Sybit-Education/airtable.java.git'
                    url = 'https://github.com/Sybit-Education/airtable.java'
                }
            }

            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            //we have to change scope from runtime to compile. Especially for Gson-lib.
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.implementation.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each { it.scope*.value = 'implementation' }
            }

            artifact sourcesJar
            artifact javadocJar
        }
        */

    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Sybit-Education/airtable.java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("ACTION_DEPLOY_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("ACTION_DEPLOY_TOKEN")
            }
        }
    }
}

integrationTest.mustRunAfter test
