/*
 * The MIT License (MIT)
 * Copyright (c) 2017 Sybit GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 */

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return version;
    }
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
   }

   dependencies {
       classpath 'com.palantir:jacoco-coverage:0.4.0'
       classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
       classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
   }
}

allprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.palantir.jacoco-coverage'
    apply plugin: 'com.jfrog.bintray'
}

group = 'com.sybit'
version = getVersionName()

description = """com.sybit airtable"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        // You can add other directories to the classpath like this:
        //runtimeClasspath += files('src/itest/resources/com/buransky')
        // Use "java" if you don't use Scala as a programming language
        java.srcDir file('src/itest/java')
  }
  // This is just to trick IntelliJ IDEA to add integration test
  // resources to classpath when running integration tests from
  // the IDE. It's is not a good solution but I don't know about
  // a better one.
  test {
    resources.srcDir file('src/itest/resources')
  }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

configurations {
    codacy
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile group: 'com.mashape.unirest', name: 'unirest-java', version:'1.4.9'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.9'
    compile group: 'org.json', name: 'json', version:'20160810'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.5'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version:'1.9.3'
    compile group: 'commons-io', name: 'commons-io', version:'2.6'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.26'

    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version:'2.23.2'
    testCompile group: 'org.slf4j', name: 'slf4j-jdk14', version:'1.7.26'

    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

// custom tasks for creating source jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
// custom tasks for creating javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

//task to send coverage data to Codacy
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

task integrationTest(type: Test) {
  testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  // This is not needed, but I like to see which tests have run
  testLogging {
    events "passed", "skipped", "failed"
  }
}

publishing {
    publications {

        MyPublication(MavenPublication) {
            //we have to change scope from runtime to compile. Especially for Gson-lib.
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each { it.scope*.value = 'compile' }
            }

            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }
            groupId group
            artifactId rootProject.name
            version getVersionName()

            artifact sourcesJar
            artifact javadocJar
        }

    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['MyPublication']
    //configurations = ['archives']

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        userOrg = 'sybit-education'
        name = 'airtable.java'
        licenses = ['MIT License']
        vcsUrl = 'https://github.com/Sybit-Education/airtable.java.git'
        version {
            name = getVersionName()
            released = new Date()
        }
    }
}

integrationTest.mustRunAfter test

